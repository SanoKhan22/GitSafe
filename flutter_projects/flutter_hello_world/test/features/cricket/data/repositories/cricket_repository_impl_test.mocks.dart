// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_hello_world/test/features/cricket/data/repositories/cricket_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i8;
import 'package:flutter_hello_world/core/network/network_info.dart' as _i2;
import 'package:flutter_hello_world/features/cricket/data/datasources/cricket_local_datasource.dart'
    as _i3;
import 'package:flutter_hello_world/features/cricket/data/datasources/cricket_mock_datasource.dart'
    as _i7;
import 'package:flutter_hello_world/features/cricket/data/models/match_model.dart'
    as _i5;
import 'package:flutter_hello_world/features/cricket/data/models/score_model.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkSpeed_0 extends _i1.SmartFake implements _i2.NetworkSpeed {
  _FakeNetworkSpeed_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CricketLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCricketLocalDataSource extends _i1.Mock
    implements _i3.CricketLocalDataSource {
  MockCricketLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.MatchModel>> getMatches() => (super.noSuchMethod(
        Invocation.method(
          #getMatches,
          [],
        ),
        returnValue: _i4.Future<List<_i5.MatchModel>>.value(<_i5.MatchModel>[]),
      ) as _i4.Future<List<_i5.MatchModel>>);

  @override
  _i4.Future<_i5.MatchModel?> getMatch(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMatch,
          [id],
        ),
        returnValue: _i4.Future<_i5.MatchModel?>.value(),
      ) as _i4.Future<_i5.MatchModel?>);

  @override
  _i4.Future<void> saveMatch(_i5.MatchModel? match) => (super.noSuchMethod(
        Invocation.method(
          #saveMatch,
          [match],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateMatch(_i5.MatchModel? match) => (super.noSuchMethod(
        Invocation.method(
          #updateMatch,
          [match],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMatch(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMatch,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.ScoreModel>> getMatchScores(String? matchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMatchScores,
          [matchId],
        ),
        returnValue: _i4.Future<List<_i6.ScoreModel>>.value(<_i6.ScoreModel>[]),
      ) as _i4.Future<List<_i6.ScoreModel>>);

  @override
  _i4.Future<void> saveScore(_i6.ScoreModel? score) => (super.noSuchMethod(
        Invocation.method(
          #saveScore,
          [score],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateScore(_i6.ScoreModel? score) => (super.noSuchMethod(
        Invocation.method(
          #updateScore,
          [score],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteScore(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteScore,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.InningModel>> getMatchInnings(String? matchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMatchInnings,
          [matchId],
        ),
        returnValue:
            _i4.Future<List<_i6.InningModel>>.value(<_i6.InningModel>[]),
      ) as _i4.Future<List<_i6.InningModel>>);

  @override
  _i4.Future<_i6.InningModel?> getInning(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getInning,
          [id],
        ),
        returnValue: _i4.Future<_i6.InningModel?>.value(),
      ) as _i4.Future<_i6.InningModel?>);

  @override
  _i4.Future<void> saveInning(_i6.InningModel? inning) => (super.noSuchMethod(
        Invocation.method(
          #saveInning,
          [inning],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateInning(_i6.InningModel? inning) => (super.noSuchMethod(
        Invocation.method(
          #updateInning,
          [inning],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.BallModel>> getInningBalls(String? inningId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInningBalls,
          [inningId],
        ),
        returnValue: _i4.Future<List<_i6.BallModel>>.value(<_i6.BallModel>[]),
      ) as _i4.Future<List<_i6.BallModel>>);

  @override
  _i4.Future<void> saveBall(_i6.BallModel? ball) => (super.noSuchMethod(
        Invocation.method(
          #saveBall,
          [ball],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateBall(_i6.BallModel? ball) => (super.noSuchMethod(
        Invocation.method(
          #updateBall,
          [ball],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.OverModel>> getInningOvers(String? inningId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInningOvers,
          [inningId],
        ),
        returnValue: _i4.Future<List<_i6.OverModel>>.value(<_i6.OverModel>[]),
      ) as _i4.Future<List<_i6.OverModel>>);

  @override
  _i4.Future<void> saveOver(_i6.OverModel? over) => (super.noSuchMethod(
        Invocation.method(
          #saveOver,
          [over],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateOver(_i6.OverModel? over) => (super.noSuchMethod(
        Invocation.method(
          #updateOver,
          [over],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearMatchData(String? matchId) => (super.noSuchMethod(
        Invocation.method(
          #clearMatchData,
          [matchId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [CricketMockDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCricketMockDataSource extends _i1.Mock
    implements _i7.CricketMockDataSource {
  MockCricketMockDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i5.MatchModel> generateMockMatches({int? count = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateMockMatches,
          [],
          {#count: count},
        ),
        returnValue: <_i5.MatchModel>[],
      ) as List<_i5.MatchModel>);

  @override
  List<_i6.ScoreModel> generateMockScores(
    String? matchId,
    List<String>? playerIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateMockScores,
          [
            matchId,
            playerIds,
          ],
        ),
        returnValue: <_i6.ScoreModel>[],
      ) as List<_i6.ScoreModel>);

  @override
  List<_i6.InningModel> generateMockInnings(
    String? matchId,
    String? team1Id,
    String? team2Id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateMockInnings,
          [
            matchId,
            team1Id,
            team2Id,
          ],
        ),
        returnValue: <_i6.InningModel>[],
      ) as List<_i6.InningModel>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i2.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i8.ConnectivityResult> get connectionType => (super.noSuchMethod(
        Invocation.getter(#connectionType),
        returnValue: _i4.Future<_i8.ConnectivityResult>.value(
            _i8.ConnectivityResult.bluetooth),
      ) as _i4.Future<_i8.ConnectivityResult>);

  @override
  _i4.Future<_i2.NetworkQuality> get networkQuality => (super.noSuchMethod(
        Invocation.getter(#networkQuality),
        returnValue:
            _i4.Future<_i2.NetworkQuality>.value(_i2.NetworkQuality.excellent),
      ) as _i4.Future<_i2.NetworkQuality>);

  @override
  _i4.Stream<_i8.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i4.Stream<_i8.ConnectivityResult>.empty(),
      ) as _i4.Stream<_i8.ConnectivityResult>);

  @override
  _i4.Future<bool> hasInternetAccess() => (super.noSuchMethod(
        Invocation.method(
          #hasInternetAccess,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.NetworkSpeed> measureNetworkSpeed() => (super.noSuchMethod(
        Invocation.method(
          #measureNetworkSpeed,
          [],
        ),
        returnValue: _i4.Future<_i2.NetworkSpeed>.value(_FakeNetworkSpeed_0(
          this,
          Invocation.method(
            #measureNetworkSpeed,
            [],
          ),
        )),
      ) as _i4.Future<_i2.NetworkSpeed>);
}
